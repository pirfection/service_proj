services:
  web:
    build: .
    command: >
      sh -c "python manage.py runserver 0.0.0.0:8000"
    volumes:
      - ./service:/service
    environment:
      - DB_HOST=${POSTGRES_HOST}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWOR=${POSTGRES_PASSWORD}
      - CELERY_BROKER_URL=redis://redis:6379/0
    ports:
      - 8001:8000
    depends_on:
      - db
    networks:
      - default

  bot:
    build: .
    command: python manage.py run_telegram_bot
    networks:
      - default
    volumes:
      - ./service:/service
  db:
    image: postgres
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    ports:
      - 5555:5432
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - default
  adminer:
    image: adminer
    ports:
      - 8080:8080
    networks:
      - default
    depends_on:
      - db
  redis:
    image: redis:7.0.5-alpine
    hostname: redis
    ports:
      - 6379:6379
    networks:
      - default

  flower:
    build:
      context: .
    command: celery -A celery_app.app flower
    volumes:
      - ./service:/service
    links:
      - redis
    depends_on:
      - redis
    ports:
      - 5559:5555
    networks:
      - default

  worker:
    build:
      context: .
    hostname: worker
    entrypoint: celery
    command: -A celery_app.app worker --loglevel=info
    volumes:
      - ./service:/service
    depends_on:
      - redis
      - db
    environment:
      - DB_HOST=${DB_HOST}
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASS=${DB_PASS}
    networks:
      - default

volumes:
  postgres_data:


networks:
  default:
    driver: bridge
